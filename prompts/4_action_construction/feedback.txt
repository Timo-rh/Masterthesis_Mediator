# Role
You are a PDDL expert and will be given a set of PDDL actions to correct and give feedback and advice on. Consider not only if the actions are technically correct, but also whether they are defined following good standards such as flexibility and clarity. Overly specifying types by use of "is-type" predicates should generally be avoided. Remember that the preconditions should make sure that only valid objects are passed to the action, we can't assume anything except the provided types. Don't assume any restrictions beyond those specified by the domain itself.  Don't unnecessarily overcomplicate the actions. Note that creating new options isn't possible. If the action is well defined, respond with "No feedback".

Use the following checklist:
1: Are any necessary precondition checks missing? For example, does the action simply assume that two things are at the same location?
2: Are any unnecessary preconditions checked? For example, does the action check not just that a person and a vehicle are at the same location for the person to enter, but also that they're both additionally in the same city?
3: Are any necessary effects missing? For example, is it missing that a person is no longer in the car after it exits?
4: Are any unnecessary effects included? For example, does a person building a wall also lead to the roof being built?
5: Can the used predicates be improved? For example, instead of checking "share_location(A,B)" it might be better to check if "at_location(A, L)" and "at_location(B, L)" are both true.
6: Should any predicate be used in a symmetrical manner? For example, if a road connects A to B, then it would likely also connect B to A. If a predicate has this symmetrical property it should ALWAYS be checked symmetrically.

# Examples
## Example 1
### Domain
In this domain, the AI agent is a wildlife conservation management system. It monitors animal populations within a reserve, tracks their movements using GPS collars, guides anti-poaching patrols, and generates relocation strategies for animals in overpopulated areas to ensure ecological balance.

### Available Types
- object: Object is always root, everything is an object
    - location: Places which can be travelled between.
        - habitat: Habitats are a type of location.
    - animal: The animals living in the park.
    - ranger: A worker protecting the animals.

### Available Predicates
The following are the predicates which could be used:
- Predicate_Definition(name= "at", predicate_parameters= {"o":"object", "l":"location"}, description= "true if object (animals or rangers) is at the location.")
- Predicate_Definition(name= "guarded_by", predicate_parameters= {"r":"ranger", "l":"location"}, description= "true if the location is guarded by the ranger.")

You can also suggest new predicates to add.

### Action
guard_location 

A ranger guards a location from poachers. The ranger has to be at the location. Example: ranger_3 guards plain_2.

#### Action Parameters
- {"r": "ranger"} - The ranger who will guard the location.
- {"l": "location"} - The location to guard.


#### Action Preconditions
```
preconditions = {
    "and": [
        Predicate_Instance(name="at", parameters=["r", "l"]),
        Predicate_Instance(name="at", parameters=["l", "l"])
    ]
}
```

#### Action Effects
```
effects = {
    "and": [
        Predicate_Instance(name="guarded_by", parameters=["r", "l"]),
        Predicate_Instance(name="at", parameters=["r", "l"])
    ]
}
```

### Feedback
1: Are any necessary precondition checks missing?
    There are no further preconditions that should be checked. So: No.

2: Are any unnecessary preconditions checked?
    Checking that the location ?l is at itself is clearly irrelevant and would likely break the action. This should be removed. Therefore: Yes.

3: Are any necessary effects missing?
    No necessary effect is missing, though they could be made more elegant (see below). Hence: No.

4: Are any unnecessary effects included?
    While guarding the location the ranger ?r is still clearly there. As such, Predicate_Instance(name="at", parameters=["r", "l"]) should remain true. As such: Yes.

5: Can the used predicates be improved?
    The predicate "guarded_by" is somewhat disfunctional. Instead, it would be better to use two predicates ("guarding" and "guarded") for the ranger and location respectively.
    This would make it simpler to check if the ranger is able to for example move, which he can't do if guarding, and to see if anyone is guarding the location, which is more important than who it is.
    This should be split. Hence: Yes.

6: Should any predicate be used in a symmetrical manner?
    None of the predicates are symmetrical. Therefore: No.

My concrete suggestions are:
    - Remove the check for Predicate_Instance(name="at", parameters=["l", "l"]) from the preconditions.
    - Remove Condition(type="not",conditions=Predicate_Instance(name="at", parameters=["r", "l"]))" from the effect.
    - Instead of using "guarded_by", use the following two predicates:
        - Predicate_Instance(name="guarding", parameters=["r"]): True if the ranger ?r is guarding anything.
        - Predicate_Instance(name="guarded", parameters=["l"]): True if the location ?l is guarded by anyone.
    - This results in the following effect:
        ```
        effects = {
            "and": [
                Predicate_Instance(name="guarding", parameters=["r"]),
                Predicate_Instance(name="guarded", parameters=["l"])
            ]
        }
        ```

## Example 2
### Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things. 

### Available Types
- object: Object is always root, everything is an object
    - location: Places which can be travelled between.
        - house: Houses which are constructed.
        - depot: A storage area.
    - truck: A vehicle for transporting workers.
    - worker: A worker performing labor.

### Available Predicates
The following are the predicates which could be used:
- Predicate_Definition(name="at", predicate_parameters={"o": "object", "l": "location"}, description="true if the object ?o (truck or worker) is at the location ?l.")
- Predicate_Definition(name="in", predicate_parameters={"w": "worker", "t": "truck"}, description="true if the worker ?w is in the truck ?t.")
- Predicate_Definition(name="road_between", predicate_parameters={"l1": "location", "l2": "location"}, description="true if a road exists between ?l1 and ?l2.")

You can also suggest new predicates to add.

### Action
drive

A truck driver from point A to point B. They need to be connected by a road and the truck has to be at the starting position. Example: truck_1 moves from house_1 to depot_1. 

#### Action Parameters
- {"t": "truck"} - The truck which is driven
- {"from": "location"} - The location the vehicle is travelling from
- {"to": "location"} - The location the vehicle is travelling to

#### Action Preconditions
```
preconditions = {
    "and": [
        Predicate_Instance(name="road_between", parameters=["from", "to"])
    ]
}
``` 

#### Action Effects
```
effects = {
    "and": [
        Condition(type="not", conditions=Predicate_Instance(name="at", parameters=["t", "from"])
        ),
        Predicate_Instance(name="at", parameters=["t", "to"])
    ]
}
```

### Feedback
1: Are any necessary precondition checks missing?
    The action explicitly states the truck has to be at the starting location, which also makes sense, but this is never checked. Thereby: Yes. 

2: Are any unnecessary preconditions checked?
    The precondition checked is needed, though it should be used symmetrically (see below). Hence: No.

3: Are any necessary effects missing?
    The effects are correct. So: No.

4: Are any unnecessary effects included?
    The effects are correct. Therefore: No.

5: Can the used predicates be improved?
    With the exception of the symmetrical use of "road_between", which is detailed below, it's clear. So: No.

6: Should any predicate be used in a symmetrical manner?
    Since roads are undirected, we need to check if there is a road from ?from to ?to or vice versa. Not doing so creates brittle PDDL. This should always be done under symmetry. As such: Yes.

You should take the following concrete steps:
    - Check that the truck is actually at the starting location by adding "Predicate_Instance(name= "at", parameters=["t", "from"])" to the precondition.
    - Make sure that both directions are checked for a road by replacing "Predicate_Instance(name= "road_between", parameters=["from", "to"])"" with "Condition(type= "or", conditions=[Predicate_Instance(name= "road_between", parameters= ["from", "to"]), Predicate_Instance(name= "road_between", parameters=["to", "from"])])"
    - This would result in the following precondition:
        ```
        preconditions = {
            "and": [
                Predicate_Instance(name="at", parameters=["t", "from"]),
                Condition(type="or", conditions=[
                    Predicate_Instance(name="road_between", parameters=["from", "to"]),
                    Predicate_Instance(name="road_between", parameters=["to", "from"])
                ])
            ]
        }
        ```

## Example 3
### Domain
I've got a building with five floors and two elevators, and I want you to plan the elevator trips for people in the building in a climate friendly way.

### Types
- object: Object is always root, everything is an object
    - floor: The locations which elevators and people move between.
    - elevator: These move between floors and can carry people.
    - person: Persons are at floors and want to move to other floors with the elevators.

### Available Predicates
The following are the predicates which could be used:
- Predicate_Definition(name="at", predicate_parameters={"o": "object", "f": "floor"}, description="true if the object ?o (floor or elevator) is at the floor ?f.")
- Predicate_Definition(name="in", predicate_parameters={"p": "person", "e": "elevator"}, description="true if the person ?p is in the elevator ?e.")

### Action
pick_up

An elevator picks up a person at a floor where they both are. Example: elevator_1 picks up person_1 at floor_1.

#### Action Parameters
- {"p": "person"} - The person being picked up
- {"e": "elevator"} - The elevator picking them up
- {"f": "floor"} - The floor both the elevator and person are on

#### Action Preconditions
```
preconditions = {
    "and": [
        Predicate_Instance(name="at", parameters=["p", "f"]),
        Predicate_Instance(name="at", parameters=["e", "f"])
    ]
}
``` 

#### Action Effects
```
effects = {
    "and": [
        Condition(type="not", conditions=Predicate_Instance(name="at", parameters=["p", "f"])),
        Predicate_Instance(name="in", parameters=["p", "e"])
    ]
}
``` 

### Feedback
1: Are any necessary precondition checks missing?
    All the necessary preconditions (being on the same floor) are checked. So: No.

2: Are any unnecessary preconditions checked?
    The only preconditions checked are those which are needed. Hence: No.

3: Are any necessary effects missing?
    The person is both correctly updated to leave the floor, and to enter the elevator. Thereby: No.

4: Are any unnecessary effects included?
    No superflous effects are included. Therefore: No.

5: Can the used predicates be improved?
    The predicates are all clear and simple. As such: No.

6: Should any predicate be used in a symmetrical manner?
    None of the predicates have symmetries of that sort. The answer is: No. 

Therefore: No feedback.

# Task
## Domain
