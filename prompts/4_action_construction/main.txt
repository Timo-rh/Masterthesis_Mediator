# Role
You are defining the possible actions with preconditions and effects (represented in PDDL-like format) of an AI agent for this task. Information about the AI agent will be provided in the domain description. Note that creating new actions is not an option.

# Rules
1. Ensure that all variables used in the `preconditions` and `effects` are explicitly and correctly defined in the `action_parameters`. Missing variables are not allowed.
2. Variables used in `preconditions` and `effects` must match the `action_parameters`. If additional variables are needed, they must be added to the `action_parameters` before defining the action.
3. Always validate that the `action_parameters` are complete and consistent with the `preconditions` and `effects` before finalizing the action.
4. If a variable is referenced in the `preconditions` or `effects` but not defined in the `action_parameters`, automatically include it in the `action_parameters` with the appropriate type.

# Example

## Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport workers.

Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work. 

## Types
- object: Everything is an object
    - worker: Human workers which do things
        - administrator: Workers who can create orders for other workers
        - general_worker: Workers who can perform a variety of tasks, if there is an order for it
    - vehicle: Used to transport workers
    - location: Places where workers and machines can be
        - house: What is constructed.

## Action
drive

A vehicle drives from a location to another. Requires that the vehicle is at the starting location and that the two locations are connected. Example: truck1 drives from loc1 to house1.

### Available Predicates
- Predicate_Definition(name= "at", predicate_parameters= {"o":"object", "l":"location"}, description= "true if object is at the location".)
- Predicate_Definition(name= "connected", predicate_parameters= {"l1":"location", "l2":"location"}, description= "true if a road exists between l1 and l2 allowing vehicle travel between them.")
- Predicate_Definition(name= "are_different", predicate_parameters= {"l1":"location", "l2":"location"}, description= "true if l1 and l2 are not the same location.")

### Action Parameters
Well, first we need to know which vehicle is travelling.
```
- {"v": "vehicle"} ; The vehicle travelling
```

Then, we need to know where it's travelling to and from. Any type of location (both house and others) should be valid to travel between.
```
- {"from": "location"} ; The location travelling from
- {"to": "location"} ; The location travelling to
```

### Action Preconditions
To be able to drive from "from" to "to" it's specified that:
    1: The truck has to be at the starting location.
    2: The two locations have to be connected.

For this, we'll need to create `Predicate_Instance` objects from the available `Predicate_Definition` objects:
 - We use "at" to define where something is. This needs two Predicate_Instances to check, if the vehicle is at the location:
    - Predicate_Instance(name: "at", parameters: ["v", "from"])
    - Predicate_Instance(name: "at", parameters: ["v", "to"])
 - We use "connected" to check if two locations are connected. This would entail that we can travel between the locations with a vehicle:
    - Predicate_Instance(name= "connected", parameters: ["from", "to"])
 - Furthermore, we can assume that the two locations have to be different:
    - Predicate_Instance(name= "are_different", parameters: ["from", "to"])

Let's specify this in the PDDL-like format:
```
preconditions = {"and", [
    Predicate_Instance(name: "at", parameters: ["v", "from"]),
    Predicate_Instance(name: "connected", parameters: ["from", "to"]),
    Predicate_Instance(name: "are_different", parameters: ["from", "to"])]}
```

### Action Effects
So, what happens when the action is performed?
 - The vehicle is no longer at "from".
 - The vehicle is now at "to".

For this we need to check the "at" predicate for the "to" location:

Let's write this in PDDL-like format:
```
effects = {
    "and": [
        Condition(
            type="not",
            conditions=Predicate_Instance(name="at", parameters=["v", "from"])
        ),
        Predicate_Instance(name="at", parameters=["v", "to"])
    ]
}
```


## Error
There was an issue with or feedback for generating the specified action. Correct the following error and regenerate the action, using the exact same schema.

1: Are any necessary precondition checks forgotten?
    The action explicitly states that the vehicle has to be at the starting location and that the two locations have to be connected. Both of these are checked. Thereby: No. 

2: Are any non-necessary preconditions checked?
    The precondition schecked is needed, though connected should be used symmetrically (see below). Hence: No.

3: Are any necessary effects forgotten?
    The effects don't model the fuel usage of the car. This should be done. So: Yes.

4: Are any non-necessary effects included?
    The effects are correct. Therefore: No.

5: Are the used predicates unclear or can be improved?
    With the exception of the symmetrical use of "connected", which is detailed below, it's clear. So: No.

6: Should any predicate be used symmetrically and isn't?
    Since roads are undirected, we need to check if there is a road from ?from to ?to or vice versa. Not doing so creates brittle PDDL. As such: Yes.

You should take the following concrete steps:
    - Add a "has_fuel" predicate to check that the vehicle has fuel. This should be checked before moving and then emptied.
    - Make sure that both directions are checked for a road by replacing "Predicate_Instance(name=connected, parameters=["from", "to":]) with "or": [
                        Predicate_Instance(name="connected", parameters=["from", "to":],
                        Predicate_Instance(name="connected", parameters=["to", "from":])]
    - This would result in the following precondition:
        ```
        preconditions = {
            "and": [
                Predicate_Instance(name: "at", parameters: ["v", "from"]),
                Predicate_Instance(name: "connected", parameters: ["from", "to"]),
                Predicate_Instance(name: "are_different", parameters: ["from", "to"])
            ]
        }
        ``` 

Make sure to reply with all three parts of the action: parameters, preconditions, and effects.

## Action
drive

A vehicle drives from a location to another. Requires that the vehicle is at the starting location and that the two locations are connected. Example: truck1 drives from loc1 to house1.

### Available Predicates
- Predicate_Definition(name= "at", predicate_parameters= {"o":"object", "l":"location"}, description= "true if object is at the location".)
- Predicate_Definition(name= "connected", predicate_parameters= {"l1":"location", "l2":"location"}, description= "true if a road exists between l1 and l2 allowing vehicle travel between them.")
- Predicate_Definition(name= "are_different", predicate_parameters= {"l1":"location", "l2":"location"}, description= "true if l1 and l2 are not the same location.")

### Response
Tracking fuel would maybe be more realistic, but nothing in the domain description hints that this is needed for the current problem. As such, to simplify the domain we ignore this advice.

However, the suggestion to check "connected" both ways is great. Let's update this.

### Action Parameters
Okay, so we'll need the same parameters as last time, but we still need to clearly specify them again:
```
- {"v": "vehicle"} ; The vehicle travelling
- {"from": "location"} ; The location travelling from
- {"to": "location"} ; The location travelling to
```

### Action Preconditions
Now, we'll make the change to check both directions of the "connected" predicate as to create more robust PDDL.
```
preconditions = {
            "and": [
                Predicate_Instance(name="at", parameters=["v", "from":],
                Predicate_Instance(name="connected", parameters=["from", "to":],
                Predicate_Instance(name="connected", parameters=["to", "from":])
            ]
        }
```

### Action Effects
These are the exact same as above, but they need to be reiterated:
```
effects = {
    "and": [
        Condition(
            type="not",
            conditions=Predicate_Instance(name="at", parameters=["v", "from"])
        ),
        Predicate_Instance(name="at", parameters=["v", "to"])
    ]
}
```


# Task
## Domain 

