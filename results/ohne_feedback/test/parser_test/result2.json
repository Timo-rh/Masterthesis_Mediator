{
  "natural_language_task": "Currently I've got five packages to ship, 3 in a storage in Ado and the rest in Betar's storage. Those from Ado should be sent 1 to Bal Street in Betar, 2 to Cli Promenade in Colin. Those from Betar should be moved to the Ado storage. The only plane is currently in Duran's airport, but each city has it's own truck and airport.",
  "domain_desc": "The AI agent here is a logistics planner that has to plan to transport packages within the locations in a city through a truck and between cities through an airplane. Within a city, the locations are directly linked, allowing trucks to travel between any two of these locations. Similarly, cities are directly connected to each other allowing airplanes to travel between any two cities. Also, there is no limit to how many packages a truck or plane can carry (so in theory a truck or plane can carry an infinite number of packages).",
  "domain_name": "logistics",
  "types": [
    {
      "name": "city",
      "description": "A city contains locations and has an airport and a truck"
    },
    {
      "name": "location",
      "description": "A place within a city where packages can be picked up or delivered"
    },
    {
      "name": "street",
      "description": "A type of location within a city"
    },
    {
      "name": "storage",
      "description": "A type of location where packages can be stored"
    },
    {
      "name": "airport",
      "description": "A type of location where planes can land and take off"
    },
    {
      "name": "vehicle",
      "description": "A means of transport that can carry packages"
    },
    {
      "name": "truck",
      "description": "A type of vehicle that transports packages between locations within a city"
    },
    {
      "name": "airplane",
      "description": "A type of vehicle that transports packages between cities"
    },
    {
      "name": "package",
      "description": "An item that needs to be transported from one location to another"
    }
  ],
  "type_hierarchy": [
    {
      "parent_type": {
        "name": "object",
        "description": "The root type, everything is an object"
      },
      "child_types": [
        {
          "name": "city",
          "description": "A city contains locations and has an airport and a truck"
        },
        {
          "name": "vehicle",
          "description": "A means of transport that can carry packages"
        },
        {
          "name": "package",
          "description": "An item that needs to be transported from one location to another"
        },
        {
          "name": "location",
          "description": "A place within a city where packages can be picked up or delivered"
        }
      ]
    },
    {
      "parent_type": {
        "name": "vehicle",
        "description": "A means of transport that can carry packages"
      },
      "child_types": [
        {
          "name": "truck",
          "description": "A type of vehicle that transports packages between locations within a city"
        },
        {
          "name": "airplane",
          "description": "A type of vehicle that transports packages between cities"
        }
      ]
    },
    {
      "parent_type": {
        "name": "location",
        "description": "A place within a city where packages can be picked up or delivered"
      },
      "child_types": [
        {
          "name": "street",
          "description": "A type of location within a city"
        },
        {
          "name": "storage",
          "description": "A type of location where packages can be stored"
        },
        {
          "name": "airport",
          "description": "A type of location where planes can land and take off"
        }
      ]
    }
  ],
  "nominated_actions": [
    {
      "related_type": "package",
      "name": "load_package_truck",
      "description": "A package is loaded onto a truck at a location. Requires that the package and the truck to be at the same location.",
      "usage_example": "Load package_1 onto truck_1 at storage_1"
    },
    {
      "related_type": "package",
      "name": "unload_package_truck",
      "description": "A package is unloaded from a truck at a location. Requires that the package is in the truck and the truck is at the location.",
      "usage_example": "Unload package_2 from truck_2 at street_1"
    },
    {
      "related_type": "package",
      "name": "load_package_airplane",
      "description": "A package is loaded onto an airplane at an airport. Requires that the package and the airplane to be at the same airport.",
      "usage_example": "Load package_3 onto airplane_1 at airport_1"
    },
    {
      "related_type": "package",
      "name": "unload_package_airplane",
      "description": "A package is unloaded from an airplane at an airport. Requires that the package is in the airplane and the airplane is at the airport.",
      "usage_example": "Unload package_4 from airplane_1 at airport_2"
    },
    {
      "related_type": "truck",
      "name": "drive_truck",
      "description": "A truck drives from one location to another within the same city. Requires the truck to be at the starting location.",
      "usage_example": "Drive truck_1 from storage_1 to street_2"
    },
    {
      "related_type": "airplane",
      "name": "fly_airplane",
      "description": "An airplane flies from one city's airport to another city's airport. Requires the airplane to be at the starting airport.",
      "usage_example": "Fly airplane_1 from airport_1 to airport_2"
    }
  ],
  "actions": [
    {
      "name": "load_package_truck",
      "description": "A package is loaded onto a truck at a location. Requires that the package and the truck to be at the same location.",
      "action_parameters": {
        "?p": "package",
        "?t": "truck",
        "?l": "location"
      },
      "preconditions": {
        "at_package": [
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?p",
              "?l": "?l"
            },
            "description": "The package must be at the location"
          }
        ],
        "at_truck": [
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?t",
              "?l": "?l"
            },
            "description": "The truck must be at the location"
          }
        ],
        "not_in_truck": [
          {
            "name": "in",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?t"
            },
            "description": "The package must not already be in the truck"
          }
        ]
      },
      "effects": {
        "package_location": [
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?p",
              "?l": "?l"
            },
            "description": "The package is no longer at the location"
          }
        ],
        "package_in_truck": [
          {
            "name": "in",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?t"
            },
            "description": "The package is now in the truck"
          }
        ]
      }
    },
    {
      "name": "unload_package_truck",
      "description": "A package is unloaded from a truck at a location. Requires that the package is in the truck and the truck is at the location.",
      "action_parameters": {
        "?p": "package",
        "?t": "truck",
        "?l": "location"
      },
      "preconditions": {
        "and": [
          {
            "name": "in",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?t"
            },
            "description": "The package must be in the truck"
          },
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?t",
              "?l": "?l"
            },
            "description": "The truck must be at the location"
          }
        ]
      },
      "effects": {
        "and": [
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?p",
              "?l": "?l"
            },
            "description": "The package is now at the location"
          },
          {
            "name": "not_in",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?t"
            },
            "description": "The package is no longer in the truck"
          }
        ]
      }
    },
    {
      "name": "load_package_airplane",
      "description": "A package is loaded onto an airplane at an airport. Requires that the package and the airplane to be at the same airport.",
      "action_parameters": {
        "?p": "package",
        "?a": "airplane",
        "?ap": "airport"
      },
      "preconditions": {
        "preconditions": [
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?p",
              "?l": "?ap"
            },
            "description": "The package must be at the airport"
          },
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?a",
              "?l": "?ap"
            },
            "description": "The airplane must be at the airport"
          },
          {
            "name": "not_in",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?a"
            },
            "description": "The package must not already be in the airplane"
          }
        ]
      },
      "effects": {
        "effects": [
          {
            "name": "in",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?a"
            },
            "description": "The package is now in the airplane"
          },
          {
            "name": "not",
            "predicate_parameters": {
              "?o": "?p",
              "?l": "?ap"
            },
            "description": "The package is no longer at the airport"
          }
        ]
      }
    },
    {
      "name": "unload_package_airplane",
      "description": "A package is unloaded from an airplane at an airport. Requires that the package is in the airplane and the airplane is at the airport.",
      "action_parameters": {
        "?p": "package",
        "?a": "airplane",
        "?ap": "airport"
      },
      "preconditions": {
        "preconditions": [
          {
            "name": "in",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?a"
            },
            "description": "The package must be in the airplane"
          },
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?a",
              "?l": "?ap"
            },
            "description": "The airplane must be at the airport"
          }
        ]
      },
      "effects": {
        "effects": [
          {
            "name": "not",
            "predicate_parameters": {
              "?p": "?p",
              "?v": "?a"
            },
            "description": "The package is no longer in the airplane"
          },
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?p",
              "?l": "?ap"
            },
            "description": "The package is now at the airport"
          }
        ]
      }
    },
    {
      "name": "drive_truck",
      "description": "A truck drives from one location to another within the same city. Requires the truck to be at the starting location.",
      "action_parameters": {
        "?t": "truck",
        "?from": "location",
        "?to": "location",
        "?c": "city"
      },
      "preconditions": {
        "location_check": [
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?t",
              "?l": "?from"
            },
            "description": "The truck must be at the starting location"
          },
          {
            "name": "in_city",
            "predicate_parameters": {
              "?l": "?from",
              "?c": "?c"
            },
            "description": "The starting location must be in the city"
          },
          {
            "name": "in_city",
            "predicate_parameters": {
              "?l": "?to",
              "?c": "?c"
            },
            "description": "The destination location must be in the same city"
          }
        ]
      },
      "effects": {
        "location_update": [
          {
            "name": "not",
            "predicate_parameters": {
              "?o": "?t",
              "?l": "?from"
            },
            "description": "The truck is no longer at the starting location"
          },
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?t",
              "?l": "?to"
            },
            "description": "The truck is now at the destination location"
          }
        ]
      }
    },
    {
      "name": "fly_airplane",
      "description": "An airplane flies from one city's airport to another city's airport. Requires the airplane to be at the starting airport.",
      "action_parameters": {
        "?a": "airplane",
        "?from_city": "city",
        "?to_city": "city"
      },
      "preconditions": {
        "location_checks": [
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?a",
              "?l": "?from_airport"
            },
            "description": "The airplane must be at the starting airport"
          },
          {
            "name": "is_airport",
            "predicate_parameters": {
              "?l": "?from_airport"
            },
            "description": "The starting location must be an airport"
          },
          {
            "name": "is_airport",
            "predicate_parameters": {
              "?l": "?to_airport"
            },
            "description": "The destination location must be an airport"
          },
          {
            "name": "in_city",
            "predicate_parameters": {
              "?l": "?from_airport",
              "?c": "?from_city"
            },
            "description": "The starting airport must be in the starting city"
          },
          {
            "name": "in_city",
            "predicate_parameters": {
              "?l": "?to_airport",
              "?c": "?to_city"
            },
            "description": "The destination airport must be in the destination city"
          }
        ]
      },
      "effects": {
        "location_changes": [
          {
            "name": "not",
            "predicate_parameters": {
              "?o": "?a",
              "?l": "?from_airport"
            },
            "description": "The airplane is no longer at the starting airport"
          },
          {
            "name": "at",
            "predicate_parameters": {
              "?o": "?a",
              "?l": "?to_airport"
            },
            "description": "The airplane is now at the destination airport"
          }
        ]
      }
    }
  ],
  "object_instances": {
    "ado_city": "The city of Ado",
    "betar_city": "The city of Betar",
    "colin_city": "The city of Colin",
    "duran_city": "The city of Duran",
    "ado_storage": "Storage facility in Ado",
    "ado_airport": "Airport in Ado",
    "betar_storage": "Storage facility in Betar",
    "betar_airport": "Airport in Betar",
    "bal_street": "Bal Street in Betar",
    "colin_airport": "Airport in Colin",
    "cli_promenade": "Cli Promenade in Colin",
    "duran_airport": "Airport in Duran",
    "ado_truck": "Truck in Ado city",
    "betar_truck": "Truck in Betar city",
    "colin_truck": "Truck in Colin city",
    "duran_truck": "Truck in Duran city",
    "plane1": "The only airplane, currently at Duran's airport",
    "package1": "First package from Ado, needs to go to Bal Street in Betar",
    "package2": "Second package from Ado, needs to go to Cli Promenade in Colin",
    "package3": "Third package from Ado, needs to go to Cli Promenade in Colin",
    "package4": "First package from Betar, needs to go to Ado storage",
    "package5": "Second package from Betar, needs to go to Ado storage"
  },
  "initial_state": [
    {
      "name": "at",
      "predicate_parameters": {
        "A1": "AdoStorage"
      },
      "description": "First Ado package is at Ado's storage"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "A2": "AdoStorage"
      },
      "description": "Second Ado package is at Ado's storage"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "A3": "AdoStorage"
      },
      "description": "Third Ado package is at Ado's storage"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "B1": "BetarStorage"
      },
      "description": "First Betar package is at Betar's storage"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "B2": "BetarStorage"
      },
      "description": "Second Betar package is at Betar's storage"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "AdoTruck": "AdoAirport"
      },
      "description": "Ado's truck starts at its airport"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "BetarTruck": "BetarAirport"
      },
      "description": "Betar's truck starts at its airport"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "ColinTruck": "ColinAirport"
      },
      "description": "Colin's truck starts at its airport"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "DuranTruck": "DuranAirport"
      },
      "description": "Duran's truck starts at its airport"
    },
    {
      "name": "at",
      "predicate_parameters": {
        "Plane1": "DuranAirport"
      },
      "description": "The plane starts at Duran's airport"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "AdoStorage": "Ado"
      },
      "description": "Ado's storage is in Ado"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "AdoAirport": "Ado"
      },
      "description": "Ado's airport is in Ado"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "BetarStorage": "Betar"
      },
      "description": "Betar's storage is in Betar"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "BetarAirport": "Betar"
      },
      "description": "Betar's airport is in Betar"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "BalStreet": "Betar"
      },
      "description": "Bal Street is in Betar"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "ColinAirport": "Colin"
      },
      "description": "Colin's airport is in Colin"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "CliPromenade": "Colin"
      },
      "description": "Cli Promenade is in Colin"
    },
    {
      "name": "in-city",
      "predicate_parameters": {
        "DuranAirport": "Duran"
      },
      "description": "Duran's airport is in Duran"
    }
  ],
  "goal_state": {
    "and": [
      {
        "name": "at",
        "predicate_parameters": {
          "package": "L1",
          "location": "bal_street"
        },
        "description": "Package L1 from Ado should be at Bal Street in Betar"
      },
      {
        "name": "at",
        "predicate_parameters": {
          "package": "L2",
          "location": "cli_promenade"
        },
        "description": "Package L2 from Ado should be at Cli Promenade in Colin"
      },
      {
        "name": "at",
        "predicate_parameters": {
          "package": "L3",
          "location": "cli_promenade"
        },
        "description": "Package L3 from Ado should be at Cli Promenade in Colin"
      },
      {
        "name": "at",
        "predicate_parameters": {
          "package": "L4",
          "location": "ado_storage"
        },
        "description": "Package L4 from Betar should be at Ado's storage"
      },
      {
        "name": "at",
        "predicate_parameters": {
          "package": "L5",
          "location": "ado_storage"
        },
        "description": "Package L5 from Betar should be at Ado's storage"
      }
    ]
  },
  "feedback": []
}