{
  "natural_language_task": "Currently I've got five packages to ship, 3 in a storage in Ado and the rest in Betar's storage. Those from Ado should be sent 1 to Bal Street in Betar, 2 to Cli Promenade in Colin. Those from Betar should be moved to the Ado storage. The only plane is currently in Duran's airport, but each city has it's own truck and airport.",
  "domain_desc": "The AI agent here is a logistics planner that has to plan to transport packages within the locations in a city through a truck and between cities through an airplane. Within a city, the locations are directly linked, allowing trucks to travel between any two of these locations. Similarly, cities are directly connected to each other allowing airplanes to travel between any two cities. Also, there is no limit to how many packages a truck or plane can carry (so in theory a truck or plane can carry an infinite number of packages).",
  "domain_name": "logistics",
  "task_name": "task1",
  "types": [
    {
      "name": "city",
      "description": "A city contains locations and has its own truck and airport"
    },
    {
      "name": "location",
      "description": "A place within a city where packages can be picked up or delivered"
    },
    {
      "name": "storage",
      "description": "A type of location where packages can be stored"
    },
    {
      "name": "street",
      "description": "A type of location where packages can be delivered"
    },
    {
      "name": "airport",
      "description": "A type of location where planes can land and take off"
    },
    {
      "name": "vehicle",
      "description": "A means of transport that can carry packages"
    },
    {
      "name": "truck",
      "description": "A type of vehicle that moves packages between locations within a city"
    },
    {
      "name": "airplane",
      "description": "A type of vehicle that moves packages between cities"
    },
    {
      "name": "package",
      "description": "An item that needs to be transported from one location to another"
    }
  ],
  "type_hierarchy": [
    {
      "parent_type": {
        "name": "object",
        "description": "Object is always root, everything is an object"
      },
      "child_types": [
        {
          "name": "city",
          "description": "A city contains locations and has its own truck and airport"
        },
        {
          "name": "vehicle",
          "description": "A means of transport that can carry packages"
        },
        {
          "name": "location",
          "description": "A place within a city where packages can be picked up or delivered"
        },
        {
          "name": "package",
          "description": "An item that needs to be transported from one location to another"
        }
      ]
    },
    {
      "parent_type": {
        "name": "vehicle",
        "description": "A means of transport that can carry packages"
      },
      "child_types": [
        {
          "name": "truck",
          "description": "A type of vehicle that moves packages between locations within a city"
        },
        {
          "name": "airplane",
          "description": "A type of vehicle that moves packages between cities"
        }
      ]
    },
    {
      "parent_type": {
        "name": "location",
        "description": "A place within a city where packages can be picked up or delivered"
      },
      "child_types": [
        {
          "name": "storage",
          "description": "A type of location where packages can be stored"
        },
        {
          "name": "street",
          "description": "A type of location where packages can be delivered"
        },
        {
          "name": "airport",
          "description": "A type of location where planes can land and take off"
        }
      ]
    }
  ],
  "nominated_actions": [
    {
      "related_type": "truck",
      "name": "load_truck",
      "description": "A package is loaded onto a truck at a location. Requires that the package and the truck to be at the same location.",
      "usage_example": "Load package_1 onto truck_1 at storage_1"
    },
    {
      "related_type": "truck",
      "name": "unload_truck",
      "description": "A package is unloaded from a truck at a location. Requires that the truck with the package be at the destination location.",
      "usage_example": "Unload package_1 from truck_1 at street_1"
    },
    {
      "related_type": "truck",
      "name": "drive_truck",
      "description": "A truck drives from one location to another within the same city. Requires the locations to be in the same city.",
      "usage_example": "Drive truck_1 from storage_1 to airport_1"
    },
    {
      "related_type": "airplane",
      "name": "load_airplane",
      "description": "A package is loaded onto an airplane at an airport. Requires that the package and the airplane to be at the same airport.",
      "usage_example": "Load package_1 onto airplane_1 at airport_1"
    },
    {
      "related_type": "airplane",
      "name": "unload_airplane",
      "description": "A package is unloaded from an airplane at an airport. Requires that the airplane with the package be at the destination airport.",
      "usage_example": "Unload package_1 from airplane_1 at airport_2"
    },
    {
      "related_type": "airplane",
      "name": "fly_airplane",
      "description": "An airplane flies from one city to another. Requires the airplane to be at the source city's airport.",
      "usage_example": "Fly airplane_1 from city_1 to city_2"
    }
  ],
  "predicates": [
    {
      "name": "at",
      "predicate_parameters": {
        "obj": "object",
        "loc": "location"
      },
      "description": "true if the object (package, truck, or airplane) is at the location"
    },
    {
      "name": "in_truck",
      "predicate_parameters": {
        "pkg": "package",
        "truck": "truck"
      },
      "description": "true if the package is loaded in the truck"
    },
    {
      "name": "in_city",
      "predicate_parameters": {
        "loc": "location",
        "city": "city"
      },
      "description": "true if the location is in the city"
    },
    {
      "name": "in",
      "predicate_parameters": {
        "pkg": "package",
        "veh": "vehicle"
      },
      "description": "true if the package is loaded in the vehicle (truck or airplane)"
    }
  ],
  "actions": [
    {
      "name": "load_truck",
      "description": "A package is loaded onto a truck at a location. Requires that the package and the truck to be at the same location.",
      "action_parameters": {
        "p": "package",
        "t": "truck",
        "l": "location"
      },
      "preconditions": {
        "and": [
          {
            "name": "at",
            "parameters": [
              "p",
              "l"
            ]
          },
          {
            "name": "at",
            "parameters": [
              "t",
              "l"
            ]
          },
          {
            "type": null,
            "conditions": {
              "name": "in",
              "parameters": [
                "p",
                "t"
              ]
            }
          }
        ]
      },
      "effects": {
        "and": [
          {
            "name": "in",
            "parameters": [
              "p",
              "t"
            ]
          },
          {
            "type": "not",
            "conditions": {
              "name": "at",
              "parameters": [
                "p",
                "l"
              ]
            }
          }
        ]
      }
    },
    {
      "name": "unload_truck",
      "description": "A package is unloaded from a truck at a location. Requires that the truck with the package be at the destination location.",
      "action_parameters": {
        "p": "package",
        "t": "truck",
        "l": "location"
      },
      "preconditions": {
        "and": [
          {
            "name": "at",
            "parameters": [
              "t",
              "l"
            ]
          },
          {
            "name": "in",
            "parameters": [
              "p",
              "t"
            ]
          }
        ]
      },
      "effects": {
        "and": [
          {
            "name": "at",
            "parameters": [
              "p",
              "l"
            ]
          },
          {
            "type": "not",
            "conditions": {
              "name": "in",
              "parameters": [
                "p",
                "t"
              ]
            }
          }
        ]
      }
    },
    {
      "name": "drive_truck",
      "description": "A truck drives from one location to another within the same city. Requires the locations to be in the same city.",
      "action_parameters": {
        "t": "truck",
        "from": "location",
        "to": "location",
        "c": "city"
      },
      "preconditions": {
        "and": [
          {
            "name": "at",
            "parameters": [
              "t",
              "from"
            ]
          },
          {
            "name": "in_city",
            "parameters": [
              "from",
              "c"
            ]
          },
          {
            "name": "in_city",
            "parameters": [
              "to",
              "c"
            ]
          },
          {
            "name": "are_different",
            "parameters": [
              "from",
              "to"
            ]
          }
        ]
      },
      "effects": {
        "and": [
          {
            "type": "not",
            "conditions": {
              "name": "at",
              "parameters": [
                "t",
                "from"
              ]
            }
          },
          {
            "name": "at",
            "parameters": [
              "t",
              "to"
            ]
          }
        ]
      }
    },
    {
      "name": "load_airplane",
      "description": "A package is loaded onto an airplane at an airport. Requires that the package and the airplane to be at the same airport.",
      "action_parameters": {
        "p": "package",
        "a": "airplane",
        "ap": "airport"
      },
      "preconditions": {
        "and": [
          {
            "name": "at",
            "parameters": [
              "p",
              "ap"
            ]
          },
          {
            "name": "at",
            "parameters": [
              "a",
              "ap"
            ]
          },
          {
            "name": "not_in",
            "parameters": [
              "p",
              "a"
            ]
          }
        ]
      },
      "effects": {
        "and": [
          {
            "name": "in",
            "parameters": [
              "p",
              "a"
            ]
          },
          {
            "type": "not",
            "conditions": {
              "name": "at",
              "parameters": [
                "p",
                "ap"
              ]
            }
          }
        ]
      }
    },
    {
      "name": "unload_airplane",
      "description": "A package is unloaded from an airplane at an airport. Requires that the airplane with the package be at the destination airport.",
      "action_parameters": {
        "p": "package",
        "a": "airplane",
        "ap": "airport"
      },
      "preconditions": {
        "and": [
          {
            "name": "at",
            "parameters": [
              "a",
              "ap"
            ]
          },
          {
            "name": "in",
            "parameters": [
              "p",
              "a"
            ]
          }
        ]
      },
      "effects": {
        "and": [
          {
            "type": "not",
            "conditions": {
              "name": "in",
              "parameters": [
                "p",
                "a"
              ]
            }
          },
          {
            "name": "at",
            "parameters": [
              "p",
              "ap"
            ]
          }
        ]
      }
    },
    {
      "name": "fly_airplane",
      "description": "An airplane flies from one city to another. Requires the airplane to be at the source city's airport.",
      "action_parameters": {
        "plane": "airplane",
        "from_city": "city",
        "to_city": "city"
      },
      "preconditions": {
        "and": [
          {
            "name": "at",
            "parameters": [
              "plane",
              "from_city"
            ]
          },
          {
            "name": "are_different",
            "parameters": [
              "from_city",
              "to_city"
            ]
          }
        ]
      },
      "effects": {
        "and": [
          {
            "type": "not",
            "conditions": {
              "name": "at",
              "parameters": [
                "plane",
                "from_city"
              ]
            }
          },
          {
            "name": "at",
            "parameters": [
              "plane",
              "to_city"
            ]
          }
        ]
      }
    }
  ],
  "object_instances": {
    "objects": {
      "ado": "city",
      "betar": "city",
      "colin": "city",
      "duran": "city",
      "ado_truck": "truck",
      "betar_truck": "truck",
      "colin_truck": "truck",
      "duran_truck": "truck",
      "plane1": "airplane",
      "ado_storage": "storage",
      "betar_storage": "storage",
      "bal_street": "street",
      "cli_promenade": "street",
      "ado_airport": "airport",
      "betar_airport": "airport",
      "colin_airport": "airport",
      "duran_airport": "airport",
      "pkg1": "package",
      "pkg2": "package",
      "pkg3": "package",
      "pkg4": "package",
      "pkg5": "package"
    }
  },
  "initial_state": {
    "initial_state_predicates": [
      {
        "name": "at",
        "parameters": [
          "pkg1",
          "ado_storage"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "pkg2",
          "ado_storage"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "pkg3",
          "ado_storage"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "pkg4",
          "betar_storage"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "pkg5",
          "betar_storage"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "plane1",
          "duran_airport"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "ado_truck",
          "ado_storage"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "betar_truck",
          "betar_storage"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "colin_truck",
          "colin_airport"
        ]
      },
      {
        "name": "at",
        "parameters": [
          "duran_truck",
          "duran_airport"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "ado_storage",
          "ado"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "ado_airport",
          "ado"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "betar_storage",
          "betar"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "betar_airport",
          "betar"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "bal_street",
          "betar"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "cli_promenade",
          "colin"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "colin_airport",
          "colin"
        ]
      },
      {
        "name": "in_city",
        "parameters": [
          "duran_airport",
          "duran"
        ]
      }
    ]
  },
  "goal_state": {
    "goal_state_predicates": {
      "and": [
        {
          "name": "at",
          "parameters": [
            "pkg1",
            "bal_street"
          ]
        },
        {
          "name": "at",
          "parameters": [
            "pkg2",
            "cli_promenade"
          ]
        },
        {
          "name": "at",
          "parameters": [
            "pkg3",
            "cli_promenade"
          ]
        },
        {
          "name": "at",
          "parameters": [
            "pkg4",
            "ado_storage"
          ]
        },
        {
          "name": "at",
          "parameters": [
            "pkg5",
            "ado_storage"
          ]
        }
      ]
    }
  },
  "feedback": [],
  "pddl_domain": "(define (domain logistics)\n    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)\n    (:types\n        city location package vehicle - object\n        airport storage street - location\n        airplane truck - vehicle\n    )\n    (:predicates (at ?obj ?loc - location)  (in ?pkg - package ?veh - vehicle)  (in_city ?loc - location ?city - city)  (in_truck ?pkg - package ?truck - truck))\n    (:action drive_truck\n        :parameters (?t - truck ?from - location ?to - location ?c - city)\n        :precondition (and (at ?t ?from) (in_city ?from ?c) (in_city ?to ?c) (are_different ?from ?to))\n        :effect (and (not (at ?t ?from)) (at ?t ?to))\n    )\n     (:action fly_airplane\n        :parameters (?plane - airplane ?from_city - city ?to_city - city)\n        :precondition (and (at ?plane ?from_city) (are_different ?from_city ?to_city))\n        :effect (and (not (at ?plane ?from_city)) (at ?plane ?to_city))\n    )\n     (:action load_airplane\n        :parameters (?p - package ?a - airplane ?ap - airport)\n        :precondition (and (at ?p ?ap) (at ?a ?ap) (not_in ?p ?a))\n        :effect (and (in ?p ?a) (not (at ?p ?ap)))\n    )\n     (:action load_truck\n        :parameters (?p - package ?t - truck ?l - location)\n        :precondition (and (at ?p ?l) (at ?t ?l))\n        :effect (and (in ?p ?t) (not (at ?p ?l)))\n    )\n     (:action unload_airplane\n        :parameters (?p - package ?a - airplane ?ap - airport)\n        :precondition (and (at ?a ?ap) (in ?p ?a))\n        :effect (and (not (in ?p ?a)) (at ?p ?ap))\n    )\n     (:action unload_truck\n        :parameters (?p - package ?t - truck ?l - location)\n        :precondition (and (at ?t ?l) (in ?p ?t))\n        :effect (and (at ?p ?l) (not (in ?p ?t)))\n    )\n)",
  "pddl_problem": "(define (problem task1)\n    (:domain logistics)\n    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)\n    (:objects plane1 - airplane ado_airport betar_airport colin_airport duran_airport - airport ado betar colin duran - city pkg1 pkg2 pkg3 pkg4 pkg5 - package ado_storage betar_storage - storage bal_street cli_promenade - street ado_truck betar_truck colin_truck duran_truck - truck)\n    (:init (at ado_truck ado_storage) (at betar_truck betar_storage) (at colin_truck colin_airport) (at duran_truck duran_airport) (at pkg1 ado_storage) (at pkg2 ado_storage) (at pkg3 ado_storage) (at pkg4 betar_storage) (at pkg5 betar_storage) (at plane1 duran_airport) (in_city ado_airport ado) (in_city ado_storage ado) (in_city bal_street betar) (in_city betar_airport betar) (in_city betar_storage betar) (in_city cli_promenade colin) (in_city colin_airport colin) (in_city duran_airport duran))\n    (:goal (and (at pkg1 bal_street) (at pkg2 cli_promenade) (at pkg3 cli_promenade) (at pkg4 ado_storage) (at pkg5 ado_storage)))\n)"
}